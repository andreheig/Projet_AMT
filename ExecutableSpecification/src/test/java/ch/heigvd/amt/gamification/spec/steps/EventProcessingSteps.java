package ch.heigvd.amt.gamification.spec.steps;

import ch.heigvd.gamification.ApiException;
import ch.heigvd.gamification.api.DefaultApi;
import ch.heigvd.gamification.api.dto.*;
import ch.heigvd.gamification.ApiResponse;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import javafx.application.Application;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.ZoneOffset;
import org.joda.time.DateTime;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.*;

/**
 *
 * @author Olivier Liechti
 */
public class EventProcessingSteps {

  private static final Logger LOG = Logger.getLogger(EventProcessingSteps.class.getName());

  /*
   * The api stub generated by swagger codegen
   */
  private final DefaultApi api = new DefaultApi();

  /*
   * Variables used to generate test data
   */
  final static String APPLICATION = "FPS";
  final static String USER_PASS = "90011445-4354-4aff-8863-d55598867884";
  int applicationsCounter = 1;
  int usersCounter = 1;
  private SharedData data;
  private List<Event> events = new ArrayList<>();
  private User user = new User();

  /*
  * Keep track of the applications created during the scenarios execution
   */
  private final Map<String, ApplicationRegistration> applications = new HashMap<>();

  /*
  * Keep track of the users created for each of the applications
   */
  private final Map<String, Map<String, User>> applicationsUsers = new HashMap<>();

  /*
  * Keep track of the token obtained for each of the applications
   */
  private final Map<String, Token> applicationsTokens = new HashMap<>();

  public EventProcessingSteps(SharedData data){ this.data = data; }

  @Given("^I have an Event payload$")
  public void i_have_an_Event_payload() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    Event event = new Event();
    event.setTimestamp(DateTime.now());
    event.setType("kill");
    event.setUserId(USER_PASS);
    event.setApplicationName(APPLICATION);
    events.add(event);
  }

  @Given("^I have two Event payload$")
  public void i_have_two_Event_payload() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    Event event = new Event();
    event.setTimestamp(DateTime.now());
    event.setType("IT Agent");
    event.setUserId(USER_PASS);
    event.setApplicationName(APPLICATION);
    events.add(event);

    event = new Event();
    event.setTimestamp(DateTime.now());
    event.setType("kill");
    event.setUserId(USER_PASS);
    event.setApplicationName(APPLICATION);
    events.add(event);
  }

  @When("^I post it to the /events endpoint$")
  public void i_post_it_to_the_events_endpoint() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    try {
      for(int i = 0; i < events.size();++i) {
        ApiResponse response = api.reportEventWithHttpInfo(events.get(i));
        data.setStatusCode(response.getStatusCode());
      }
    } catch (ApiException e) {
      data.setStatusCode(e.getCode());
    }
  }

  @When("^I post the first to the /events endpoint$")
  public void i_post_the_first_to_the_events_endpoint() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    try {
        ApiResponse response = api.reportEventWithHttpInfo(events.get(0));
        data.setStatusCode(response.getStatusCode());
    } catch (ApiException e) {
      data.setStatusCode(e.getCode());
    }
  }

  @When("^I post the second to the /events endpoint$")
  public void i_post_the_second_to_the_events_endpoint() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    try {
      ApiResponse response = api.reportEventWithHttpInfo(events.get(1));
      data.setStatusCode(response.getStatusCode());
    } catch (ApiException e) {
      data.setStatusCode(e.getCode());
    }
  }

  @When("^I ask the user U(\\d+) from the /users/\\{id\\} endpoint$")
  public void i_ask_the_user_U_from_the_users_endpoint(int arg1) throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    ApiResponse response = api.findUserByIdWithHttpInfo(APPLICATION,USER_PASS);
    data.setStatusCode(response.getStatusCode());
    user = (User) response.getData();
  }

  @Then("^the payload in the response has a property numberOfEvents with a value of (\\d+)$")
  public void the_payload_in_the_response_has_a_property_numberOfEvents_with_a_value_of(int expectedNumberOfEvents) throws Throwable {
    User retrievedUserState = (User) user;
    assertEquals(expectedNumberOfEvents, retrievedUserState.getNumberOfEvents().intValue());
  }

  @Then("^I see the badge in the list$")
  public void i_see_the_badge_in_the_list() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    ApplicationsBadgesSummary expected = new ApplicationsBadgesSummary();
    expected.setBadgesName("beginner");
    for(ApplicationsBadgesSummary b : user.getBadges()){
      if(b.getBadgesName().equalsIgnoreCase(expected.getBadgesName())){
        assert true;
        return;
      }
    }
   assert false;
    return;
  }

  @Then("^I see the userScale in the list grow-up$")
  public void i_see_the_userScale_in_the_list_grow_up() throws Throwable {
    // Write code here that turns the phrase above into concrete actions
    ApplicationsScalesSummary expectedKill = new ApplicationsScalesSummary();
    expectedKill.setScaleName("Killpoints");
    expectedKill.setScaleMax(100);

    ApplicationsScalesSummary expectedChuck = new ApplicationsScalesSummary();
    expectedChuck.setScaleName("Chuck Norris doesn't need an OS.");
    expectedChuck.setScaleMax(28);

    for(ApplicationsScalesSummary s : user.getScales()){
      if(s.getScaleName().equalsIgnoreCase(expectedKill.getScaleName())) {
        if (s.getScaleMax() > expectedKill.getScaleMax()) {
          assert true;
          return;
        }
      }
      else if (s.getScaleName().equalsIgnoreCase(expectedChuck.getScaleName())){
        if (s.getScaleMax() > expectedChuck.getScaleMax()) {
          assert true;
          return;
        }
      }
    }
    assert false;
    return;

  }

}
