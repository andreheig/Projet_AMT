/**
 * Gamification Platform API
 * **This is the documentation of the AMT Gamification Platform API** 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ch.heigvd.gamification.api;

import ch.heigvd.gamification.ApiException;
import ch.heigvd.gamification.api.dto.Token;
import ch.heigvd.gamification.api.dto.Credentials;
import ch.heigvd.gamification.api.dto.ApplicationsBadgesSummary;
import ch.heigvd.gamification.api.dto.User;
import ch.heigvd.gamification.api.dto.RegistrationBadges;
import ch.heigvd.gamification.api.dto.RegistrationRule;
import ch.heigvd.gamification.api.dto.RegistrationSummary;
import ch.heigvd.gamification.api.dto.Registration;
import ch.heigvd.gamification.api.dto.Event;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authenticateApplicationAndGetTokenTest() throws ApiException {
        Credentials body = null;
        // Token response = api.authenticateApplicationAndGetToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one application by uuid
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findApplicationBadgesByUuidTest() throws ApiException {
        String idApplication = null;
        String uuid = null;
        // List<ApplicationsBadgesSummary> response = api.findApplicationBadgesByUuid(idApplication, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one user by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String xGamificationToken = null;
        String id = null;
        // User response = api.findUserById(xGamificationToken, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * add new badges
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBadgeTest() throws ApiException {
        String idApplication = null;
        String uuid = null;
        RegistrationBadges body = null;
        // api.postBadge(idApplication, uuid, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * add new rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postRuleTest() throws ApiException {
        String idApplication = null;
        String uuid = null;
        RegistrationRule body = null;
        // api.postRule(idApplication, uuid, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registrationsGetTest() throws ApiException {
        // List<RegistrationSummary> response = api.registrationsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registrationsPostTest() throws ApiException {
        Registration body = null;
        // api.registrationsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Report that a new event has happened in the gamified application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportEventTest() throws ApiException {
        String xGamificationToken = null;
        Event event = null;
        // Event response = api.reportEvent(xGamificationToken, event);

        // TODO: test validations
    }
    
}
