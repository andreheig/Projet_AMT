/**
 * Gamification Platform API
 * **This is the documentation of the AMT Gamification Platform API** 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ch.heigvd.gamification.api;

import ch.heigvd.gamification.ApiException;
import ch.heigvd.gamification.api.dto.Token;
import ch.heigvd.gamification.api.dto.Credentials;
import ch.heigvd.gamification.api.dto.ApplicationsBadgesSummary;
import ch.heigvd.gamification.api.dto.ApplicationsRulesSummary;
import ch.heigvd.gamification.api.dto.ApplicationsScalesSummary;
import ch.heigvd.gamification.api.dto.User;
import ch.heigvd.gamification.api.dto.ApplicationSummary;
import ch.heigvd.gamification.api.dto.ApplicationRegistration;
import ch.heigvd.gamification.api.dto.RegistrationBadge;
import ch.heigvd.gamification.api.dto.RegistrationRule;
import ch.heigvd.gamification.api.dto.RegistrationScale;
import ch.heigvd.gamification.api.dto.Event;
import ch.heigvd.gamification.api.dto.ApplicationUpdate;
import ch.heigvd.gamification.api.dto.UpdateBadge;
import ch.heigvd.gamification.api.dto.UpdateRule;
import ch.heigvd.gamification.api.dto.UpdateScale;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authenticateApplicationAndGetTokenTest() throws ApiException {
        Credentials body = null;
        // Token response = api.authenticateApplicationAndGetToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve badges by application uuid
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findApplicationBadgesTest() throws ApiException {
        String uuid = null;
        // List<ApplicationsBadgesSummary> response = api.findApplicationBadges(uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve rules by application uuid
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findApplicationRulesTest() throws ApiException {
        String uuid = null;
        // List<ApplicationsRulesSummary> response = api.findApplicationRules(uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve scale by application uuid
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findApplicationScalesTest() throws ApiException {
        String uuid = null;
        // List<ApplicationsScalesSummary> response = api.findApplicationScales(uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one user by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String xGamificationToken = null;
        String id = null;
        // User response = api.findUserById(xGamificationToken, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * retrieve all applications
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllApplicationsTest() throws ApiException {
        // List<ApplicationSummary> response = api.getAllApplications();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * register a new application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postApplicationTest() throws ApiException {
        ApplicationRegistration body = null;
        // api.postApplication(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * add new badge
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBadgeTest() throws ApiException {
        String uuid = null;
        RegistrationBadge body = null;
        // api.postBadge(uuid, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * add new rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postRuleTest() throws ApiException {
        String uuid = null;
        RegistrationRule body = null;
        // api.postRule(uuid, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * add new scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postScaleTest() throws ApiException {
        String uuid = null;
        RegistrationScale body = null;
        // api.postScale(uuid, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Report that a new event has happened in the gamified application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportEventTest() throws ApiException {
        Event event = null;
        // Event response = api.reportEvent(event);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * update an existing application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        ApplicationUpdate body = null;
        // api.updateApplication(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * update a badge
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBadgeTest() throws ApiException {
        String uuid = null;
        UpdateBadge body = null;
        // api.updateBadge(uuid, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * update a rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRuleTest() throws ApiException {
        String uuid = null;
        UpdateRule body = null;
        // api.updateRule(uuid, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * update scale
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScaleTest() throws ApiException {
        String uuid = null;
        UpdateScale body = null;
        // api.updateScale(uuid, body);

        // TODO: test validations
    }
    
}
